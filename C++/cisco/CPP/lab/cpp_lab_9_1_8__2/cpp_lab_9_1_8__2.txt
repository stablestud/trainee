9.1.8.2 Template specialization

Objectives
Familiarize the student with:

template specialization - using two types;
template specialization - writing your own specialized functions.
Scenario
Write a template specialization function for the given code (this code doesn't compile). You must also modify the template function. Your version of the function should add a given point to both points on a given line. All code in the main function must compile correctly.

Your version of the program must print the same result as the expected output.

15
15
P3: 3:3
Line start: 2:2
Line end: 3:3


#include <iostream>

using namespace std;

struct Point
{
	int x, y;
};

struct Line
{
	Point start, end;
};

template<class T>//your code
T add(T a, V b)
{
	return a + b;
}

template<>
Point add(Point a, Point b)
{
	Point res;

	res.x = a.x + b.x;
	res.y = a.y + b.y;

	return res;
}

//your code

int main()
{
	cout << add(5, 10) << endl;
	cout << add(5.0, 10.0) << endl;

	Point p1 = { 1, 1 };
	Point p2 = { 2, 2 };
	Point p3 = add(p1, p2);

	cout << "P3: " << p3.x << ":" << p3.y << endl;

	Line x_line = { p1, p2 };
	Line moved_line = add(x_line, p1);

	cout << "Line start: " << moved_line.start.x << ":" << moved_line.start.y << endl;
	cout << "Line end: " << moved_line.end.x << ":" << moved_line.end.y << endl;

	return 0;
}
