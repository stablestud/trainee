9.1.9.1 Class templates

Objectives
Familiarize the student with:

class templates - creating them;
class templates - writing methods.
Scenario
Write a template class which satisfies the given code (this code doesn't compile). Add constructor code, create an add_point method and variables to store the values of x and y.

For the sake of simplicity, make all methods and attributes public. Almost all the code in the main function must compile correctly. We've commented out one line which doesn't compile, because it's a different type of object (you don't have to write code to compile this).

Your version of the program must print the same result as the expected output.

P1: 1:1
P2: 2.1:2.3
P1: 2:2


#include <iostream>

using namespace std;

//your code

int main()
{
	Point<int> p1(1, 1);
	Point<double> p2(2.1, 2.3);

	cout << "P1: " << p1.x << ":" << p1.y << endl;
	cout << "P2: " << p2.x << ":" << p2.y << endl;

	Point<int> p3(1, 1);

	//p1.add_point(p2); you can't operate on objects of a different type
	p1.add_point(p3);

	cout << "P1: " << p1.x << ":" << p1.y << endl;

	return 0;
}
