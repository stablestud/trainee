6.1.3.1 Inplace merging

Objectives
Familiarize the student with:

inplace_merge - using the function;
sort - using the function and comparing it with inplace_merge;
printing on screen.
Scenario
Fill in the blanks in the program. After this, test your program (just run it).

Your version of the program must print the same result as the expected output for all given input. Test it for all input cases. Does inplace_merge have any effect? Is there any reason to use it instead of sort?

Example input
4 7

Example output
0 1 9

Example input
3 9

Example output
0 1 2 3 8 9


#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>

using namespace std;

void print(const int & value)
{
	cout << value << " ";
}

int main()
{
	vector<int> v1 = { 5, 6, 7, 8,  9, 0, 1, 2, 3, 4 };

	unsigned start_value;
	cin >> start_value;

	unsigned stop_value;
	cin >> stop_value;

	if (start_value>stop_value)
	{
		swap(start_value, stop_value);
	}

	if (start_value>9 || stop_value>9)
	{
		cout << "Stop value and start value must be less than or equal to 9" << endl;
		return 1;
	}

	sort(v1.begin() + ___________, v1.begin() + __________);
	inplace_merge(v1.begin() + ___________, v1.begin() + stop_value, v1.begin() + __________);

	for_each(v1.begin() + start_value, v1.begin() + stop_value, print); cout << endl;

	return 0;
}
