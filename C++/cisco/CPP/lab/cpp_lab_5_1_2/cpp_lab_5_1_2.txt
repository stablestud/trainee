5.1.2.1 Sorting elements

Objectives
Familiarize the student with:

lists - creating them;
lists - filling them with values;
lists - removing and inserting values;
printing on screen.
Scenario
Improve the program below. It should sort strings, case-insensitive, but letters must be first, digits second (i.e., AA is before A1).

Your version of the program must print the same result as the expected output.

65 97 48

Source collection:
v1: A0 a1 a0 a2 a3 A4 aA Ab AB b4
Sorting in ascending order:
Normal sort:
v1: A0 A4 AB Ab a0 a1 a2 a3 aA b4
Stable sort:
v2: A0 a0 a1 a2 a3 A4 aA Ab AB b4


#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <ctype.h>
#include <string>

using namespace std;

template<class T>
void print(const T & value)
{
	cout << value << " ";
}

char t(char c)
{
	return tolower(c);
}

string toLower(const string & v)
{
	string ret(v);

	transform(ret.begin(), ret.end(), ret.begin(), t);

	return ret;
}

bool ascending_caseinsensitive(const string & a, const string & b)
{
	return toLower(a) < toLower(b);
}

int main()
{
	vector <string> v1 = { "A0", "a1", "a0", "a2", "a3", "A4", "aA", "Ab", "AB", "b4" };
	vector <string> v2(v1);

	cout << int('A') << " " << int('a') << " "  << int('0') << endl << endl; //check these values
	cout << "Source collection:\n";
	cout << "v1: "; 

	for_each(v1.begin(), v1.end(), print<string>); cout << endl;

	cout << "Sorting in ascending order:\n";
	cout << "Normal sort:\n";

	sort(v1.begin(), v1.end());

	cout << "v1: "; for_each(v1.begin(), v1.end(), print<string>); cout << endl;
	cout << "Stable sort:\n";

	stable_sort(v2.begin(), v2.end(), ascending_caseinsensitive);

	cout << "v2: "; for_each(v2.begin(), v2.end(), print<string>); cout << endl << endl;

	return 0;
}
