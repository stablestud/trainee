9.1.12.1 Templates - specialized methods in class templates

Objectives
Familiarize the student with:

class templates - creating them;
class templates - writing methods;
class templates - writing specialized methods.
Scenario
Write a template class which satisfies the given code (this code doesn't compile). You can use the code from the previous problem. Add constructor code, create an add_point method and variables to store the values of x and y.

Add a specialized version of the add_point method which gets one int value and just adds it to the x and y attributes.

For the sake of simplicity, make all methods and attributes public. Your version of the program must print the same result as the expected output.

P1: 1:1
P2: 2.1:2.3
P1: 2:2
P1: 3:3


#include <iostream>

using namespace std;

//your code

int main()
{
	Point<int> p1(1, 1);
	Point<double> p2(2.1, 2.3);

	cout << "P1: " << p1.x << ":" << p1.y << endl;
	cout << "P2: " << p2.x << ":" << p2.y << endl;

	Point<int> p3(1, 1);

	p1.add_point(p3);
	cout << "P1: " << p1.x << ":" << p1.y << endl;

	p1.add_point(1);
	cout << "P1: " << p1.x << ":" << p1.y << endl;

	return 0;
}
